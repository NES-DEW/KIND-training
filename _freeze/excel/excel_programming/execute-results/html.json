{
  "hash": "acc303ed6b9759a231be96c3c5ce3452",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Excel programming\"\ndate: \"2025-02-13\"\nexecute: \n  echo: false\n  freeze: auto\ncategories: [excel, intermediate, Excel skill-builder]\n---\n\n\n\n\n\nThis is a session in our intermediate-level Excel skill builder course. This consists of five practical training sessions, designed to be taken together, that are aimed at helping users with some prior Excel experience build and consolidate their skills. The sessions are:\n\n+ [Excel foundations 1](excel_foundations_01.qmd)\n+ [Excel foundations 2](excel_foundations_02.qmd) \n+ [Lookups in Excel](lookups_in_excel.qmd)\n+ [Excel programming](excel_programming.qmd) (this session)\n+ [Pivot tables and pivot charts](pivot_tables_and_pivot_charts.qmd)\n\n::: {.callout-note collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Session materials\n\n-   [{{< iconify ph:file-xls size=2x >}}.xlsx exercises](src/KIND_excel_skills_s04_exercises.xlsx)\n-   [{{< iconify ph:file-xls size=2x >}}.xlsx exercises (completed)](src/KIND_excel_skills_s04_exercises_final.xlsx)\n\n:::\n\n\n\n\n\n\n::: {.cell layout-align=\"left\"}\nNo feedback found for this session\n:::\n\n\n\n\n\n## Session outline\n\n+ this session is about programming in Excel\n+ it aims to show several tools that can help you build more robust Excel workbooks\n    + implicit intersection and naming\n    + R1C1\n    + `INDIRECT()`\n    + array formulas\n    + lambda functions\n\n## Getting started\n+ files for today:\n    + [`s04_exercises.xlsx`](src/KIND_excel_skills_s04_exercises.xlsx) is a starting-point for the exercises today\n    + [`s04_exercises_final.xlsx`](src/KIND_excel_skills_s04_exercises_final.xlsx) is the end-point for the exercises today - it's there to help if you get stuck or lost\n\n::: {.callout-tip title=\"Task\"}\n1. open the sample spreadsheet `s04_exercises.xlsx` and have a look around\n:::\n\n## Naming reminder\n::: {.callout-tip title=\"Task\"}\n+ in the `s04_exercises.xlsx` workbook, go to the `Names, indirect, R1C1` worksheet\n+ please name the table \"raw_data\"\n+ please name the average age cell \"age_average\"\n+ please name the three summary cells for Service_duration \"duration_summary\"\n:::\n\n## Structured referencing and the implicit intersection operator\n+ we've already seen that we can use the shorthand `table[col]` to refer to a column\n+ within a table, we can use a modification of this to quickly refer to values\n+ within a table, you can refer to values in a column using the [**implicit intersection** operator](https://support.microsoft.com/en-gb/office/implicit-intersection-operator-ce3be07b-0101-4450-a24e-c1c999be2b34) `[@col]`\n    + (if you're using an older version of Excel, you might also see this written as `[@[Service_duration]]`)\n  \t\n\n## R1C1\n+ R1C1 gives an alternative way of referring to cells\n+ slightly more complicated, but more precise, and less confusing\n+ largely encountered in VBA, but available and helpful in standard Excel\n\n::: {.callout-tip title=\"Task\"}\n1. Switch `s04_exercises.xlsx` to R1C1 by `File` > `Options` > `Formulas` > `R1C1 reference style` </br>![R1C1 references](images/04_r1c1.png)\n:::\n\n+ in R1C1, column letters (A, B, C,â€¦) are replaced by numbers\n+ row numbers remain as row numbers\n    + R1C1 = A1\n    + R2C8 = H2\n\n::: {.callout-tip title=\"Task\"}\n1. in R16C4, please sum up the `Service_duration` column using R1C1\n1. switch to inspect formulas (`Ctrl` + backtick)\n:::\n\n## Absolute/relative R1C1 referencing\n\n+ Provide an absolute reference by giving a row and column number - like R2C2\n+ Provide a relative reference by adding a numeric offset in square brackets\n    + relative to the cell that the reference is written in\n    + from col 8, row 2, we'd reference col 2, row 2 by `RC[-6]`\n+ the same combination of absolute/relative reference styles available as in A1 referencing\n\n\n## Why bother with R1C1?\n+ R1C1 adds a bit of complexity to simple formulas\n+ but it makes complicated formulas (and repeated formulas) **much** easier to understand\n+ this is a big help when working with more complex Excel documents - particularly if you're debugging something that's gone wrong\n\n::: {.callout-tip title=\"Task\"}\n1. in column 6, row 2, copy the name \"Keeshon Abdourahma ne\" by using the formula `=RC[-5]`\n1. now flash-fill down column 6 to duplicate all the names in column 1 (you should see the `First name` column populate too)\n1. now switch off inspect formulas (`Ctrl` + backtick)\n1. now switch back to A1 and re-inspect formulas\n:::\n\n+ R1C1 gives the same formulas for the same work across different columns\n+ we have to work this out by hand with A1 referencing - the row number would be different each time\n+ this helps us understand quickly when and where a formula is repeated\n+ (apparently) faster with very complex sheets - but given that Excel benchmarking is a closed book to me, I've been unable to find any solid information about this anywhere.\n\n::: {.callout-tip title=\"Task\"}\n1. Please switch back to A1 referencing\n1. Please switch out of the formula auditing view, if necessary\n:::\n\n\n## `INDIRECT()`\n+ `INDIRECT()` allows a user to specify a cell reference in a cell\n+ that reduces the amount of fiddling about deep inside formulas if/when cell references change\n+ break the references out using INDIRECT, and edit the reference directly in the worksheet.\n\n## `INDIRECT()` tasks\n+ the formula `=LEFT(A1, SEARCH(\" \", A1))` effectively is a first-name finder - it returns all the text before the first space\n+ you can see this formula in action in the `First name` column\n\n::: {.callout-tip title=\"Task\"}\n1. There are four `INDIRECT()` examples in rows 19-22\n1. Please review them and make sure that you see how `INDIRECT()` can be used in four different ways:\n+ by supplying an A1 reference\n+ by supplying an R1C1 reference by adding the argument FALSE inside `INDIRECT()`\n+ by referencing a named cell\n+ by concatenating a reference together from partial references using `&`\n:::\n\n## Array formulas\n\n+ usually, formulas produce one cell's worth of output\n+ **array formulas** return > 1 cell\n+ new, [M365 only](https://support.microsoft.com/en-au/office/guidelines-and-examples-of-array-formulas-7d94a64e-3ff3-4686-9372-ecfd5caa57c7)\n\n::: {.callout-tip title=\"Task\"}\n1. In the Array worksheet, there are four exercises to try\n1. `=SORT(UNIQUE(array_table[num1]))` will return a sorted column of unique values\n1. `=FILTER(array_table[num1], array_table[num1] > 6)` will filter a column by values\n1. `=FILTER(array_table[num1], array_table[num1] > array_table[num2])` will filter a column by another column\n1. `=RANDARRAY(20, 2, 1, 10, TRUE)` will generate two columns of random values between 1 and 10\n:::\n\n\n## Lambda functions\n+ lambda functions are a way of re-using complex formulas without copy-pasting\n+ how does it work?\n    + take an existing (working) formula\n    + work out what the inputs are - usually, which cells are referenced\n    + convert that function into a named lambda function which we can re-use\n\n## Making a lambda function\n+ imagine we want to convert `= A3 * B3` to a lambda\n+ start with the lambda outline `= LAMBDA()`\n+ next, add test values in a second set of brackets - `= LAMBDA()(A3, B3)`\n+ we now invent parameter names (like variable names) for each of those values, and add them: `= LAMBDA(n_1, n_2, )(A3, B3)`\n+ then add the formula that we want to replicate `= LAMBDA(n_1, n_2, n_1 * n_2)(A3, B3)`\n\n## Saving a lambda function \n+ once you've tested and checked your lambda with a range of test values, copy your lambda formula\n+ then open the name manager (`Ctrl` + `F3`)\n+ create a new name, then name your lambda definition using the **New Name** interface\n+ paste your lambda into the **Refers to:** section\n    + omit the test values - so just `= LAMBDA(n_1, n_2, n_1 * n_2)`\n+ test your new lambda function\n    \n::: {.callout-tip title=\"Task\"}\n1. build a simple formula based on two columns in the lambda sheet (like `col1 * col2`)\n1. in a new cell translate that into a lambda function, like `=LAMBDA(num_1,num_2, num_1* num_2)(A1,B1)`\n1. then copy just the lambda part, and open the name manager (`Ctrl` + `F3`)\n1. New... </br>![New lambda function](images/04_multo.png)\n:::\n\n## Lambda functions\n+ a real-ish example: converting CHI to DoB\n+ you can use the following ðŸ˜± formula:\n`=DATE(IF(RIGHT(LEFT(G2, 6), 2) > RIGHT(YEAR(TODAY()), 2), 19, 20) & RIGHT(LEFT(G2, 6), 2), MID(LEFT(G2, 6), 3, 2), LEFT(LEFT(G2, 6), 2))`\n+ that's a horrifying thing to paste about, so we can make this into a lambda\n+ test version `=LAMBDA(chi, DATE(IF(RIGHT(LEFT(chi, 6), 2) > RIGHT(YEAR(TODAY()), 2), 19, 20)&RIGHT(LEFT(chi, 6), 2), MID(LEFT(chi, 6), 3, 2), LEFT(LEFT(chi, 6), 2)))(G2)`\n+ name manager then to `CHI_TO_DOB`\n\n## Thank yous\n\nI'm grateful to Jennifer Watt, John Mackintosh, Duncan Sage, David Coigach, Michael Robb, Angela Godfrey, and other members of the KIND network for their valuable suggestions and corrections to these training materials",
    "supporting": [
      "excel_programming_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}