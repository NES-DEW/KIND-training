---
title: Conditions in Power Automate
date: "2025-02-27"
execute: 
  echo: false
  output: true
  freeze: false
categories: [skills, intermediate, Power Automate]
editor_options: 
  chunk_output_type: console
---

```{r}
#| results: asis
#| fig-align: left
#| fig-height: 0.6
#| fig-width: 3

source(here::here("R/feed_block.R"))
feed_block("Conditions in Power Automate")

```

## Prerequisites for this session

- good general digital skills 
- prior experience of writing your own Flows in Power Automate
- appropriate M365 access and permissions for Power Automate, Teams, and OneDrive

## Introduction

-   [Control flow](https://en.wikipedia.org/wiki/Control_flow) is the
    technical term that coders use to describe software that changes its
    behaviour depending on circumstances.
-   This session looks at using **variables** and **conditions** to
    do control flow in Power Automate
    
## Plan
- We'll build a series of H&SC-relevant mini-projects:
    -   connecting to a OneDrive folder
    -   counting files in that folder
    -   posting a count of those files in a Teams message
    -   varying the text of that Teams message by count
    -   varying the content of that Teams message by the time of day (or
        day of week...)
        
## Project one: connect with a OneDrive folder

+ we'll start with a very basic Flow that connects to a directory of files
in your OneDrive.



:::{.callout-note collapse=false appearance='default' icon=true}
### Setup

-   download the [sample files](src/pa_conditions.zip), and extract to your OneDrive
  - or, create a directory in your OneDrive containing some text files,
    labelled `0.txt`, `1.txt`, `2.txt`...`9.txt`
-   create a new instant flow
-   after the `Manually trigger a flow` box, add a
    `List files in folder` connector </br> ![List files in folder](images/ce_struct_00.png)
- supply the address of your directory of text files in the `List files in folder` connector
-   save and test your flow
:::

:::{.callout-tip collapse=false appearance='default' icon=true}
+ don't expect any interesting output, but do run this flow to check for errors and permissions
+ in the next project, we'll collect part of the information that
Power Automate makes available about your files
+ Power Automate has connectors for most network/cloud file storage platform, so this approach should be adaptable to whatever platform you use
:::


## Project two: counting files

* we'll now update that flow to count the number of files in the
folder
* we'll need to create **variables** to hold that number
* in later stages, we'll then pass that count variable into some useful output (like a Teams message)

::: {.callout-note collapse="false" appearance="default" icon="true"}
### Task

-   add an `Initialize variable` block</br>![Add an Initialize variable block](images/ce_struct_01.png)
-  now populate the `Initialize variable` fields as shown below:</br> ![Populate the Initialize variable fields](images/ce_struct_02.png)
    -   give your variable a name: `file_content`
    -   set the type, which tells Power Automate what sort of value to
        expect: `array`
    -   finally, set a starting value: `body/value`

:::

* we now have our `file_content` variable that contains **all** our file info
* in a real flow, we'd probably want to put other parts of that to use
* but in this simple example, we'll just count the number of entries (= the number of files in our directory)

::: {.callout-tip collapse="false" appearance="default" icon="true"}
### Task

-   add a second `Initialize variable` block
-   populate the fields as shown below:
    -   give your variable a name: `file_count`
    -   set the type, which tells Power Automate what sort of value to
        expect: `integer`
    -   finally, set a starting value. That's more involved than the
        previous variable: you need to write a formula to calculate the
        length of your file_content -
        `length(variables('file_content'))`</br>![Formula to calculate
        length](images/clipboard-122056247.png)
:::

+ that should leave you with a flow like the following, which you should
save and test: </br> ![File counting flow](images/clipboard-1997909894.png){height="300px"}
+ once run, you should see that the value of `file_count` is 10</br>
![Test value of file_count](images/clipboard-2788856187.png)

## Digression: data types
* a note on data types: Power Automate has several different built-in data
types: </br> ![Data types](images/clipboard-601178402.png)
* Power Automate is inflexible about data types: so, for example, if you accidentally try to set an integer to 2.4, your flow will fail
* you'll need to think carefully about what sort of value your variable is intended to hold

## Project three: posting a count of those files in a Teams message

This one should be easy! At least, once you've been added to the KIND
test Team...

::: {.callout-tip collapse="false" appearance="default" icon="true"}
### Task

-   add a `Post message in a chat or channel` connector
-   populate the fields - it's recommended to post as `User` as this
    allows you to edit any embarrasing errors in your posts once they've
    been posted
-   for the message, write some suitable text, then include the
    file_count variable </br>![Compose a Teams message](images/clipboard-2062069255.png){height="350px"}
:::

![Sample Teams output](images/clipboard-1054286011.png){height="250px"}

## Project 4: varying the text of that Teams message by count
+ so far, our message just repeats the contents of `file_count` with a bit of static text
+ we can use a **Condition** to change the text that accompanies that value</br> ![Condition to alter text](images/ce_struct_06.png)
+ we should be able to adapt our previous flow to use that condition

## Project 5: varying text by time of day
+ we could now add another variable to our flow
+ this will set a value based on the time of day</br>![Variable based on time of day](images/ce_struct_11.png)
+ we can set our condition to use this variable instead of `file_count`
