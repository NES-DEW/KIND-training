



## Joins

Joins are where we merge two tibbles together in some way, while broadly preserving the structure of each. There are a couple of variants that we'll introduce in turn:

+ **binding joins**, which are joins where data are added based on position. For example, we merge the each of the first columns in the two tibbles into one new first column.
+ **mutating joins**, which are joins where data are added by values to match existing data. For example, we might match two tibbles based on CHI number, and connect two otherwise dissimilar data sets together. 

Let's start with binding joins - after a bit of basic package loading:

```{r}
library(dplyr)
```


# Binding

## Introduction

To demonstrate how joins work in dplyr, we need to start with some suitable data. 

We'll set up some extremely simple data using `tribble()` to demonstrate how the joins work:

```{r}
x <- tibble::tribble(
  ~category, ~value, ~key,
  "x",5,3,
  "x",2,7,
  "x",4,2,
  "x",7,1,
  "x",9,1
  )



y <- tibble::tribble(
  ~category, ~value, ~key,
  "y",2,5,
  "y",7,2,
  "y",3,2,
  "y",2,8,
  "y",2,14
  )

```

## `bind_rows()`

`bind_rows()` does exactly what the name describes. It adds the rows of one tibble to another, resulting in one joined tibble containing all the rows:
```{r}
x |>
  bind_rows(y) 
```

## Missing values

`bind_rows()` will create new columns and fill with NAs if the names of the columns don't match:
  
```{r}
x |>
  rename("wrong_name" = "value") |>
  bind_rows(y)
```

And you can create an optional ID column to show where each row originated, which is helpful for debugging:
  
```{r}
x |>
  bind_rows(y, .id="ID") 
```

You can also `bind_rows()` by list:
  
```{r}
bind_rows(list(x, y)) 
```

## bind_cols()

Another function, another descriptive name. `bind_cols()` adds columns to the starting tibble, but otherwise works as `bind_rows()`:
  
```{r}
x |>
  bind_cols(y, .name_repair="universal") 
```

# Mutating joins

## Introduction

To get started with mutating joins in dplyr, we could do much worse than the [first part of the manual page](https://dplyr.tidyverse.org/reference/mutate-joins.html), which is nice and clear:
  
  ----
  
*The mutating joins add columns from y to x, matching rows based on the keys:*
  
+ `inner_join()`: includes all rows in x and y.
+ `left_join()`: includes all rows in x.
+ `right_join()`: includes all rows in y.
+ `full_join()`: includes all rows in x or y.
+ `anti_join()`: includes all rows in x that are not in y.

*If a row in x matches multiple rows in y, all the rows in y will be returned once for each matching row in x.*
  
----

## `inner_join()`
  

![Inner join](images/inner.png){height="250px"}

`inner_join()` joins two tibbles by whichever key column you supply using `by=`

## `inner_join()` example
  
```{r}
x |>
  inner_join(y, by="key") 
```

This returns all the rows that exist in both tibbles.

## `left_join()`

![Left join](images/left.png){height="250px"}


`left_join()` includes all the rows in the first tibble

## `left_join()` example
  
```{r}
x |>
  left_join(y, by="key", suffix = c(".a", ".b")) 
```

We get returned the rows that exist in `x`, and any that match keys from `y`. Any 'extra' rows in simple_a are filled in with `NAs`. We've also tweaked the column names in this example, using the `suffix` argument.

## `right_join()`

![Right join](images/right.png){height="250px"}

`right_join()` includes all the rows in the second tibble

## `right_join()` example

```{r}
x |>
  right_join(y, by="key", keep=T) 
```

We get all the rows that exist in `y`, and any that match keys from `simple_a`, again, filling with NAs where appropriate. Here, we're demonstrating the `keep` argument, which will repeat the column on which we're joining for each of the tibbles.

## `full_join()`

![Full join](images/full.png){height="250px"}

`full_join()` gives us all the rows from all the tibbles

## `full_join()` example

```{r}
x |>
  full_join(y, by="key") 
```

All rows in both tibbles, filling with `NAs` where needed.

## `anti_join()`


![Anti join](images/anti.png){height="250px"}


Anti-join is a bit of an outlier, because it returns a smaller tibble than it is supplied with. It returns all the rows of our first tibble that are not present in the second tibble

## `anti_join()` example

```{r}
x |>
  anti_join(y, by="key") 
```

Only those rows in `x` that are not present in `y`.

# by and `join_by()`

Our examples so far have used data with identical column names. Let's break that now:

```{r}
y <- y |>
  rename(new_key = key) 
```

Non-matching column names has traditionally complicated  joining syntax. But there's a comparatively new dplyr function that can simplify things: `join_by()`


## `join_by()` example

```{r}
x |>
  inner_join(y, by = join_by("key" == "new_key"))
```

<!-- ## `join_by()` inqui join example -->

## Helpers

```{r}
#| eval: false

keep = NULL # keep the join keys
na_matches = c("na", "never") # what to do with NA values
multiple = "all" # in the case of multiple matches, any/first/last match is joined
unmatched = "drop" # drop or error
relationship = "one-to-many" # error checking
```

<!-- multiple and unmatched -->

