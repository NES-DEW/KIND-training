---
editor_options: 
  chunk_output_type: console
---

```{r}
library(purrr)
```



## Introduction

purrr is mainly used for functional programme, especially making it easier and more consistent to apply a function over a group of items and collect the output:

```{r}
more_less <- function(col) {
  if(sum(col) > 200) "Loads"
  else "Not much"
}

mtcars |>
  map(more_less)

mtcars |>
  map_vec(more_less)
```

But purrr also has a set of tools for working with lists. This session is an introduction to those functions.

## A reminder about lists

Lists are a data structure in R with two very useful properties. Unlike vectors, they can contain data of different classes. Unlike data frames/tibbles, they can be ragged, containing items of different lengths:

```{r}
test_list <- list(chars = letters[1:5],
     nums = 1:3)
test_list
```

* subset a list by item/index with `[]`:

```{r}
test_list["nums"]
test_list[1]
```

** retrieve the contents of a list item with `$` or `[[]]`:

```{r}
test_list[["nums"]]
test_list$chars
```

** subset those list contents with chained square brackets:

```{r}
test_list[["nums"]][1]
test_list$chars[3]
```

** nesting lists within lists

```{r}
deep_list <- list(outer_one = list(
  inner_one = 10:5,
  inner_two = 6:2),
outer_two = 20:15)
```


## `modify()`

Effectively `map` for list items. `modify()` applies a function to each list item and returns a structurally-identical modified list:

```{r}
test_list |>
  modify(toupper)
```

Select list items to modify with `modify_at()`/`modify_if()` / `modify_depth()`:

```{r}
test_list |>
  modify_at("chars", toupper) # select list item by quoted name

test_list |>
  modify_if(is.numeric, \(x) x + 2) # select list item by function

list(list(list(deepo = c(3, 4, 5)))) |> # likely to be more trouble than it's worth, especially because many functions will do odd things to list itels
  modify_depth(3, \(x) x * 10)
```

## `reduce()`

```{r}
1:10 |>
  reduce(sum)

1:10 |>
  accumulate(sum)

test_list |>
  reduce(paste) # odd results over vectors, and beware of vector recycling
```

