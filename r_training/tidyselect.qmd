---
title: Tidyselect
date: 2025-05-19
execute: 
  echo: true
output: "markup"
freeze: auto
categories: [R, intermediate]
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
#| results: asis
#| fig-align: left
#| fig-height: 0.6
#| fig-width: 3

source(here::here("R/feed_block.R"))
feed_block("Tidyselect")

```

## Introduction

<!-- New material? -->
<!-- pick() -->
<!-- distinct(starwars, pick(contains("color"))) -->
<!-- distinct(starwars, contains("color")) -->
<!-- ?pick -->

Lots of the power in `dplyr` comes from the many ways that you can select columns. In this section, we'll look at some examples of tidyselect, which is a series of functions that allow you to specify columns by various  patterns. Not only does this give you lots of ways of simplifying and streamlining your code, but it's also a great way of making your code more portable - so that it works well inside functions, or across different data sets. 

In the tidyevaluation training session, we look across this material in much more depth. There's quite a lot to absorb, so I would definitely recommend using the manual pages (using `??tidyselect`) as a reference for this section.

Package loading is just:
```{r}
library(NHSRdatasets) # for sample data
library(dplyr)
```


## `contains()`

`contains()` is a good example of tidyselect functions that are based on pattern matching. There are several related functions that work in the same way, including:

  + `starts_with()`
  + `ends_with()`
  + `matches()`
  + `num_range()`
  
Here, we'll concentrate on `contains()` as an exemplar for this family, because the other functions in the family work in a very similar way. `contains()` allows you to pick columns based on their names. So to `select()` all the columns in `stranded_data` whose names contain the string "care":

```{r}
stranded_data |>
  select(contains("care"))
  
```

Note that by default this string matching is case insensitive, so "care" will match columns called "CARE", "Care", and "cArE". You can also combine the `contains()` statement with other `select()` criteria:

```{r}
stranded_data |>
  select(age, contains("care"))
```

And you can match over a vector of strings:

```{r}
stranded_data |>
  select(contains(c("care", "age")))
```

The order of strings in your vector will determine the order of columns returned:

```{r}
stranded_data |>
  select(contains(c("age", "care")))
```

And you can negate the `contains()` to give the complement:

```{r}
stranded_data |>
  select(-contains(c("age", "care")))
```

`starts_with()` and `ends_with()` work in exactly the same way - but will only match strings at the beginning and end of the column name respectively:

```{r}
stranded_data |>
  select(starts_with("care"))

stranded_data |>
  select(ends_with("care"))
```


`matches()` allows use of a [regular expression](https://regex101.com/):

```{r}
stranded_data |>
  select(matches("me[dn]"))
```

`num_range()` matches columns with numeric ranges. For example, in the [billboard](https://cran.r-project.org/web/packages/billboard/billboard.pdf) dataset, there are a large number of columns named `wk1`, `wk2`... representing weeks. To select `wk10` to `wk15`:

```{r}
tidyr::billboard |> 
  dplyr::select(num_range("wk", 10:15))
```

## `any_of()`

`any_of()` matches **full** column names from a vector of names. Let's set up some names:

```{r}
my_columns <- names(stranded_data)[1:4]
my_columns
```

If we supply `any_of()` with this vector of names, `any_of()` will match any column names that appear in the vector, and ignore those that do not:

```{r}
stranded_data |>
  select(any_of(my_columns))
```

Compared to `contains()`, `any_of()` will match the entire name, while `contains()` will match any part of the name. 

There's a great tip on the `all_of()` man page - `any_of()` is an especially clever way to drop columns from a tibble because calling it more than once does not cause an error:

```{r}
stranded_data |>
  select(-any_of(my_columns)) |>
  select(-any_of(my_columns))
  
```

Trying to do something similar using `select()` will cause an error:

```{r}
try(stranded_data |>
  select(-age) |>
  select(-age))
```

## `if_any()` and `if_all()`

```{r}

stranded_data |>
  filter(if_any(contains("care"), ~ .x == 1)) # that'll find rows with a 1 in any "care" column


stranded_data |>
  mutate(care_found = case_when(if_all(contains("care"), ~ .x >= 1) ~ "Yup",
                                TRUE ~ "Nope")) |>
  select(contains("care"), care_found)


```


## `everything()`

`everything()` selects all columns. This is less useful in combination with `select()` itself, but simplifies some other functions well - particularly with `pivot_longer()`. 

```{r}
stranded_data |> 
  select(2:5) |>
  tidyr::pivot_longer(everything())
```

See also `last_col()`, which is another example of a tidyselect helper for specific columns.

