---
title: Summarising data with dplyr
date: 2025-05-19
execute: 
  echo: true
  output: "markup"
  freeze: auto
categories: [R, intermediate]
---


```{r}
#| echo: false
#| results: markup
#| fig-align: left
#| fig-height: 0.6
#| fig-width: 3

source(here::here("R/feed_block.R"))
feed_block("Summarising data with dplyr")

```

## `summarise()`

Let's do a little bit of package loading, and then start summarising things:

```{r}
library(NHSRdatasets)
library(dplyr)
```


The description on the [dplyr reference page for `summarise`](https://dplyr.tidyverse.org/reference/summarise.html) is admirably clear:
  
> summarise() creates a new data frame. It returns one row for each combination of grouping variables; if there are no grouping variables, the output will have a single row summarising all observations in the input. It will contain one column for each grouping variable and one column for each of the summary statistics that you have specified.

```{r}
ae_attendances |> 
  summarise(sum(attendances)) 
```

`summarise()` is especially strong in concert with `group_by()`:
  
```{r}
ae_attendances |> 
  group_by(org_code) |>
  summarise(sum(attendances)) 
```

Two important things to note here:
  
  + `group_by` doesn't change how the data looks - just how it behaves:
+ Each call to `summarise()` removes a layer of grouping

```{r}
ae_attendances |> 
  group_by(org_code) |>
  summarise(sum(attendances)) |>
  summarise(sum(`sum(attendances)`)) # horrible default column names, which we'll fix in future
```

And you can build simple formulae inside `summarise()`:

```{r}
ae_attendances |> 
  group_by(org_code) |>
  summarise(total = sum(attendances)) |> # rename columns like select 
  arrange(desc(total)) 

ae_attendances |> 
  group_by(org_code) |>
  summarise(non_admissions = sum(attendances - admissions)) |>
  arrange(desc(non_admissions)) 
```

## `reframe()`
A recent change in dplyr 1.1.0 is that `summarise()` now will only return one row per group. A new function, `reframe()`, has been developed to produce multiple-row summaries. It works exactly like `summarise()` except, rather than removing one grouping layer per operation, it always returns an ungrouped tibble. The syntax is the same as `summarise()`:

```{r results='markup'}
sum <- ae_attendances |>
  group_by(year = lubridate::floor_date(period, unit = "year")) |>
  summarise(
    year = lubridate::year(year),
    non_admissions = sum(attendances - admissions)
  )

ref <- ae_attendances |>
  group_by(year = lubridate::floor_date(period, unit = "year")) |>
  reframe(
    year = lubridate::year(year),
    non_admissions = sum(attendances - admissions)
  )

waldo::compare(sum, ref)
```


## `count()` and `tally()`

`count()` counts unique values, and is equivalent to using `group_by()` and then `summarise()`:

```{r}
synthetic_news_data |>
  count(died) 
```

That's roughly equivalent to:
  
```{r}
synthetic_news_data |> 
  group_by(died) |> 
  summarise(n = n())  
```

`tally()` works similarly, except without the `group_by()`:
  
```{r}
synthetic_news_data |> 
  # group_by(died) |> 
  summarise(n = n())  

synthetic_news_data |>
  tally() 
```

A possible source of confusion is that adding a column name to `tally()` performs a **weighted count** of that column:
  
```{r}
synthetic_news_data |>
  tally(age)
```

Roughly equivalent to:
  
```{r results='markup'}
synthetic_news_data |>
  pull(age) |>
  sum()
```

`count()` has a useful sort option to arrange by group size:
  
```{r}
synthetic_news_data |>
  count(syst, sort=T) 
```

Both `count()` and `tally()` have `add_` variants, which work like `mutate()` in that they add a new column containing the count:
  
```{r}
#add_ variants
synthetic_news_data |>
  add_count(syst, name="syst_BP_count") |>
  select(syst, last_col())
```

`add_tally()` gives a col with the same value in each row of a group:
  
```{r}
synthetic_news_data |>
  group_by(died) |>
  add_tally() |>
  slice(1:3) 
```

## `rowwise()`

`rowwise()` forms groups per row. For example, we could take the average of the three columns in ae_attendances:
  
```{r eval=T}
# to find the daily mean of attendances, breaches, and admissions
ae_attendances |> 
  rowwise() |>
  mutate(mean = mean(c(attendances, breaches, admissions))) 
```

Compare and contrast with the results we obtain if we omit `rowwise()`, where the mean column contains the averages of the three columns overall, rather than for each date and organisation:
  
```{r}
ae_attendances |> 
  mutate(mean=mean(c(attendances, breaches, admissions))) 
```

There's also a `c_across()` function to select columns that looks really promising for `rowwise()` work, but bafflingly it is extremely slow here, taking 50x longer than the equivalent `mutate()`. This is a known issue - ["particularly for long, narrow, data"](https://github.com/tidyverse/dplyr/issues/4953). So this code is switched off and provided here for information only - although do feel free to try it out if you don't mind a ten second wait.

```{r eval=F, include=T}
ae_attendances |> 
  rowwise() |>
  mutate(mean = mean(c_across(4:6))) 
```
